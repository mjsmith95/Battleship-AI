import pygame

# Define some colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

# This sets the WIDTH and HEIGHT of each grid location
WIDTH = 20
HEIGHT = 20

# This sets the margin between each cell
MARGIN = 5

# Create a 2 dimensional array. A two dimensional
# array is simply a list of lists.
grid = []
for row in range(10):
    # Add an empty array that will hold each cell
    # in this row
    grid.append([])
    for column in range(10):
        grid[row].append(0)  # Append a cell

# Set row 1, cell 5 to one. (Remember rows and
# column numbers start at zero.)


# Initialize pygame
pygame.init()

# Set the HEIGHT and WIDTH of the screen
WINDOW_SIZE = [255, 255]
screen = pygame.display.set_mode(WINDOW_SIZE)

# Set title of screen
pygame.display.set_caption("Array Backed Grid")

# Loop until the user clicks the close button.
done = False


def draw_grid(_grid):
    grid_recs = []
    for _row in range(10):
        grid_recs.append([])
        for _column in range(10):
            _color = WHITE
            if _grid[_row][_column] == 1:
                _color = GREEN
            elif _grid[_row][_column] == 2:
                _color = RED
            grid_recs[_row].append(pygame.Rect([(MARGIN + WIDTH) * _column + MARGIN,
                                                    (MARGIN + HEIGHT) * _row + MARGIN,
                                                    WIDTH,
                                                    HEIGHT]))

            pygame.draw.rect(screen,
                             _color,
                             pygame.Rect([(MARGIN + WIDTH) * _column + MARGIN,
                                          (MARGIN + HEIGHT) * _row + MARGIN,
                                          WIDTH,
                                          HEIGHT]))
    return grid_recs


# Used to manage how fast the screen updates
clock = pygame.time.Clock()
if __name__ == "__main__":
    # -------- Main Program Loop -----------
    is_hover = False
    recs_list = draw_grid(grid)

    while not done:
        for event in pygame.event.get():  # User did something
            if event.type == pygame.QUIT:  # If user clicked close
                done = True  # Flag that we are done so we exit this loop
            elif event.type == pygame.MOUSEBUTTONDOWN:
                # User clicks the mouse. Get the position
                pos = pygame.mouse.get_pos()
                # Change the x/y screen coordinates to grid coordinates
                column = pos[0] // (WIDTH + MARGIN)
                row = pos[1] // (HEIGHT + MARGIN)
                # Set that location to one
                grid[row][column] = 1
                print("Click ", pos, "Grid coordinates: ", row, column)
            for rec in recs_list:
                if rec.get_rect().collidepoint(pygame.mouse.get_pos()):
                    column = pos[0] // (WIDTH + MARGIN)
                    row = pos[1] // (HEIGHT + MARGIN)
                    # Set that location to one
                    grid[row][column] = 2
                else:
                    column = pos[0] // (WIDTH + MARGIN)
                    row = pos[1] // (HEIGHT + MARGIN)
                    # Set that location to one
                    grid[row][column] = 0
                recs_list = draw_grid()

                    # Set the screen background
        screen.fill(BLACK)

        # Draw the grid
        recs_list = draw_grid(grid)
        """for row in range(10):
            for column in range(10):
                color = WHITE
                if grid[row][column] == 1:
                    color = GREEN
                pygame.draw.rect(screen,
                                 color,
                                 [(MARGIN + WIDTH) * column + MARGIN,
                                  (MARGIN + HEIGHT) * row + MARGIN,
                                  WIDTH,
                                  HEIGHT])"""

        # Limit to 60 frames per second
        clock.tick(60)

        # Go ahead and update the screen with what we've drawn.
        pygame.display.flip()

    # Be IDLE friendly. If you forget this line, the program will 'hang'
    # on exit.
    pygame.quit()
